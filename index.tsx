

import { GoogleGenAI, Chat } from "@google/genai";
import { marked } from 'marked';

// TODO: Replace with your actual WeatherAPI.com API key
const WEATHER_API_KEY = '4522ecbfce5d46fab22115230251309';

// TODO: Replace with your actual Google GenAI API key
const ai = new GoogleGenAI({apiKey: 'AIzaSyCvEfS-nRy8q1Bpx2SQiRIXzoKdVdjKMOA'});
let chat: Chat;

// Data processed from the user-provided text file
const marketDatabase = [
  {"state": "Andhra Pradesh", "district": "Krishna", "commodity": "Maize", "modal_price": "2350"},
  {"state": "Andhra Pradesh", "district": "Krishna", "commodity": "Paddy(Dhan)(Common)", "modal_price": "2300"},
  {"state": "Andhra Pradesh", "district": "Nellore", "commodity": "Cotton", "modal_price": "7521"},
  {"state": "Gujarat", "district": "Amreli", "commodity": "Cotton", "modal_price": "7200"},
  {"state": "Gujarat", "district": "Amreli", "commodity": "Guar", "modal_price": "4800"},
  {"state": "Gujarat", "district": "Bharuch", "commodity": "Cotton", "modal_price": "6000"},
  {"state": "Gujarat", "district": "Gandhinagar", "commodity": "Bajra(Pearl Millet/Cumbu)", "modal_price": "2150"},
  {"state": "Gujarat", "district": "Mehsana", "commodity": "Bajra(Pearl Millet/Cumbu)", "modal_price": "2625"},
  {"state": "Gujarat", "district": "Surat", "commodity": "Bitter gourd", "modal_price": "3750"},
  {"state": "Gujarat", "district": "Surat", "commodity": "Cucumbar(Kheera)", "modal_price": "2250"},
  {"state": "Gujarat", "district": "Surat", "commodity": "Indian Beans (Seam)", "modal_price": "6250"},
  {"state": "Gujarat", "district": "Surat", "commodity": "Lemon", "modal_price": "2500"},
  {"state": "Gujarat", "district": "Surat", "commodity": "Potato", "modal_price": "1225"},
  {"state": "Gujarat", "district": "Surat", "commodity": "Turmeric (raw)", "modal_price": "8500"},
  {"state": "Gujarat", "district": "Surat", "commodity": "Banana - Green", "modal_price": "1000"},
  {"state": "Gujarat", "district": "Surat", "commodity": "Brinjal", "modal_price": "6500"},
  {"state": "Gujarat", "district": "Surat", "commodity": "Carrot", "modal_price": "1900"},
  {"state": "Gujarat", "district": "Surat", "commodity": "Cauliflower", "modal_price": "2400"},
  {"state": "Gujarat", "district": "Surat", "commodity": "Ginger(Green)", "modal_price": "3000"},
  {"state": "Gujarat", "district": "Surat", "commodity": "Sweet Potato", "modal_price": "4000"},
  {"state": "Gujarat", "district": "Surat", "commodity": "Tomato", "modal_price": "1150"},
  {"state": "Haryana", "district": "Bhiwani", "commodity": "Onion", "modal_price": "1750"},
  {"state": "Haryana", "district": "Bhiwani", "commodity": "Potato", "modal_price": "1450"},
  {"state": "Madhya Pradesh", "district": "Damoh", "commodity": "Wheat", "modal_price": "2405"},
  {"state": "Madhya Pradesh", "district": "Indore", "commodity": "Soyabean", "modal_price": "4350"},
  {"state": "Madhya Pradesh", "district": "Indore", "commodity": "Garlic", "modal_price": "3500"},
  {"state": "Madhya Pradesh", "district": "Indore", "commodity": "Wheat", "modal_price": "2701"},
  {"state": "Maharashtra", "district": "Nagpur", "commodity": "Brinjal", "modal_price": "1840"},
  {"state": "Maharashtra", "district": "Pune", "commodity": "Cabbage", "modal_price": "750"},
  {"state": "Maharashtra", "district": "Pune", "commodity": "Tomato", "modal_price": "1250"},
  {"state": "Maharashtra", "district": "Raigad", "commodity": "Rice", "modal_price": "3800"},
  {"state": "Punjab", "district": "Gurdaspur", "commodity": "Potato", "modal_price": "1000"},
  {"state": "Punjab", "district": "Ludhiana", "commodity": "Onion", "modal_price": "2100"},
  {"state": "Punjab", "district": "Ludhiana", "commodity": "Potato", "modal_price": "600"},
  {"state": "Rajasthan", "district": "Ganganagar", "commodity": "Potato", "modal_price": "1550"},
  {"state": "Rajasthan", "district": "Jaipur Rural", "commodity": "Guar Seed(Cluster Beans Seed)", "modal_price": "4617"},
  {"state": "Uttar Pradesh", "district": "Aligarh", "commodity": "Bajra(Pearl Millet/Cumbu)", "modal_price": "2150"},
  {"state": "Uttar Pradesh", "district": "Aligarh", "commodity": "Green Chilli", "modal_price": "4250"},
  {"state": "Uttar Pradesh", "district": "Badaun", "commodity": "Wheat", "modal_price": "2480"},
  {"state": "Uttar Pradesh", "district": "Bareilly", "commodity": "Tomato", "modal_price": "2200"},
  {"state": "Uttar Pradesh", "district": "Jhansi", "commodity": "Groundnut", "modal_price": "5580"},
  {"state": "Uttar Pradesh", "district": "Jhansi", "commodity": "Wheat", "modal_price": "2540"},
  {"state": "West Bengal", "district": "Medinipur(W)", "commodity": "Onion", "modal_price": "1950"},
  {"state": "West Bengal", "district": "Medinipur(W)", "commodity": "Paddy(Dhan)(Common)", "modal_price": "2330"},
  {"state": "West Bengal", "district": "Medinipur(W)", "commodity": "Potato", "modal_price": "1340"},
];

// Maps commodity names from the data file to the app's standard crop names
const commodityMap = {
    'Paddy(Dhan)(Common)': 'Rice', 'Rice': 'Rice',
    'Wheat': 'Wheat',
    'Sugarcane': 'Sugarcane',
    'Cotton': 'Cotton',
    'Arhar (Tur/Red Gram)(Whole)': 'Pulses', 'Bengal Gram(Gram)(Whole)': 'Pulses', 'Lentil (Masur)(Whole)': 'Pulses', 'Black Gram (Urd Beans)(Whole)': 'Pulses', 'Peas Wet': 'Pulses', 'Field Pea': 'Pulses', 'White Peas': 'Pulses',
    'Mustard': 'Oilseeds', 'Sesamum(Sesame,Gingelly,Til)': 'Oilseeds', 'Castor Seed': 'Oilseeds',
    'Maize': 'Maize',
    'Potato': 'Potato',
    'Onion': 'Onion',
    'Tomato': 'Tomato',
    'Soyabean': 'Soybean',
    'Groundnut': 'Groundnut', 'Ground Nut Seed': 'Groundnut', 'Groundnut pods (raw)': 'Groundnut',
    'Bajra(Pearl Millet/Cumbu)': 'Millets', 'Jowar(Sorghum)': 'Millets',
    'Mango (Raw-Ripe)': 'Mango', 'Mango': 'Mango',
    'Banana': 'Banana', 'Banana - Green': 'Banana',
    'Tea': 'Tea'
};


const translations = {
  en: {
    appName: 'KisanMitra',
    welcome: 'Welcome!',
    selectLang: 'Please select your language',
    cropSelection: {
      title: 'Select crops',
      subtitle: 'Select up to 8 crops you are interested in.',
      subtitle2: 'You can always change it later.',
      next: 'Next',
      counter: (count) => `${count}/8`,
      crops: [
        { name: 'Rice', emoji: 'ЁЯНЪ' }, { name: 'Wheat', emoji: 'ЁЯМ╛' }, { name: 'Sugarcane', emoji: 'ЁЯОЛ' },
        { name: 'Cotton', emoji: 'тЪк' }, { name: 'Pulses', emoji: 'ЁЯлШ' }, { name: 'Oilseeds', emoji: 'ЁЯМ╝' },
        { name: 'Maize', emoji: 'ЁЯМ╜' }, { name: 'Potato', emoji: 'ЁЯеФ' }, { name: 'Onion', emoji: 'ЁЯзЕ' },
        { name: 'Tomato', emoji: 'ЁЯНЕ' }, { name: 'Soybean', emoji: 'ЁЯМ▒' }, { name: 'Groundnut', emoji: 'ЁЯеЬ' },
        { name: 'Millets', emoji: 'ЁЯМ╛' }, { name: 'Mango', emoji: 'ЁЯен' }, { name: 'Banana', emoji: 'ЁЯНМ' },
        { name: 'Tea', emoji: 'ЁЯН╡' },
      ],
    },
    locationSelection: {
        title: 'Your Location',
        subtitle: 'Enter your location for personalized weather and market info.',
        placeholder: 'e.g., Pune, Maharashtra',
        confirm: 'Confirm Location',
    },
    nav: { crops: 'Your Crops', market: 'Market', schemes: 'Schemes', diagnose: 'Diagnose', you: 'You' },
    crops: { header: 'Your Farm', weatherTitle: 'Today\'s Weather', cropTitle: 'Recommended Crop', cropReason: (crop) => `Ideal conditions for ${crop}.`, weatherError: 'Could not fetch weather. Please check your location and API key.' },
    market: { header: 'Market Prices', subtitle: 'Current rates in your local area', perQuintal: 'per quintal', marketError: 'Could not load market prices for your location.', noMarketData: 'No market data found for your selected crops in this location.' },
    schemes: {
      header: 'Government Schemes',
      schemesList: [
        { name: 'PM Kisan Samman Nidhi', benefit: 'Financial support of тВ╣6,000 per year.' },
        { name: 'Pradhan Mantri Fasal Bima Yojana', benefit: 'Insurance coverage against crop failure.' },
        { name: 'Kisan Credit Card (KCC)', benefit: 'Provides farmers with timely access to credit.' },
        { name: 'Soil Health Card Scheme', benefit: 'Helps improve soil health and productivity.' },
      ],
      learnMore: 'Learn More',
    },
    profile: {
      header: 'Your Profile',
      name: 'Name',
      mockName: 'Ramesh Kumar',
      language: 'Language',
      location: 'Location',
      lastCrop: 'Last Recommendation',
      myCrops: 'My Crops',
      noRecommendation: 'None yet',
      switchLanguage: 'Switch Language',
    },
    chat: { title: 'AI Assistant', placeholder: 'Ask a question...', send: 'Send' },
    diagnose: {
        header: 'Crop Diagnosis',
        uploadPrompt: 'Upload a photo of a plant to identify diseases and get remedies.',
        uploadBtn: 'Upload Image',
        diagnoseBtn: 'Diagnose',
        analyzing: 'Analyzing...',
        clear: 'Diagnose Another',
        error: 'Sorry, I couldn\'t analyze this image. Please try another one.'
    },
    systemInstruction: "You are 'KisanMitra', a friendly AI for Indian farmers. Respond in simple English. Use farmer-friendly emojis like ЁЯМ╛, ЁЯМ▒, ЁЯТз, тШАя╕П, ЁЯЩП. Keep answers short.",
    explainScheme: (name) => `Explain the '${name}' scheme in simple terms.`,
  },
  hi: {
    appName: 'рдХрд┐рд╕рд╛рдирдорд┐рддреНрд░',
    welcome: 'рд╕реНрд╡рд╛рдЧрдд рд╣реИ!',
    selectLang: 'рдХреГрдкрдпрд╛ рдЕрдкрдиреА рднрд╛рд╖рд╛ рдЪреБрдиреЗрдВ',
    cropSelection: {
      title: 'рдлрд╕рд▓реЗрдВ рдЪреБрдиреЗрдВ',
      subtitle: 'рдЬрд┐рди рдлрд╕рд▓реЛрдВ рдореЗрдВ рдЖрдкрдХреА рд░реБрдЪрд┐ рд╣реИ, рдЙрдирдореЗрдВ рд╕реЗ 8 рддрдХ рдЪреБрдиреЗрдВред',
      subtitle2: 'рдЖрдк рдЗрд╕реЗ рдмрд╛рдж рдореЗрдВ рдХрднреА рднреА рдмрджрд▓ рд╕рдХрддреЗ рд╣реИрдВред',
      next: 'рдЕрдЧрд▓рд╛',
      counter: (count) => `${count}/8`,
      crops: [
        { name: 'рдЪрд╛рд╡рд▓', emoji: 'ЁЯНЪ' }, { name: 'рдЧреЗрд╣реВрдБ', emoji: 'ЁЯМ╛' }, { name: 'рдЧрдиреНрдирд╛', emoji: 'ЁЯОЛ' },
        { name: 'рдХрдкрд╛рд╕', emoji: 'тЪк' }, { name: 'рджрд╛рд▓реЗрдВ', emoji: 'ЁЯлШ' }, { name: 'рддрд┐рд▓рд╣рди', emoji: 'ЁЯМ╝' },
        { name: 'рдордХреНрдХрд╛', emoji: 'ЁЯМ╜' }, { name: 'рдЖрд▓реВ', emoji: 'ЁЯеФ' }, { name: 'рдкреНрдпрд╛рдЬ', emoji: 'ЁЯзЕ' },
        { name: 'рдЯрдорд╛рдЯрд░', emoji: 'ЁЯНЕ' }, { name: 'рд╕реЛрдпрд╛рдмреАрди', emoji: 'ЁЯМ▒' }, { name: 'рдореВрдБрдЧрдлрд▓реА', emoji: 'ЁЯеЬ' },
        { name: 'рдмрд╛рдЬрд░рд╛', emoji: 'ЁЯМ╛' }, { name: 'рдЖрдо', emoji: 'ЁЯен' }, { name: 'рдХреЗрд▓рд╛', emoji: 'ЁЯНМ' },
        { name: 'рдЪрд╛рдп', emoji: 'ЁЯН╡' },
      ],
    },
    locationSelection: {
        title: 'рдЖрдкрдХрд╛ рд╕реНрдерд╛рди',
        subtitle: 'рд╡реНрдпрдХреНрддрд┐рдЧрдд рдореМрд╕рдо рдФрд░ рдмрд╛рдЬрд╛рд░ рдХреА рдЬрд╛рдирдХрд╛рд░реА рдХреЗ рд▓рд┐рдП рдЕрдкрдирд╛ рд╕реНрдерд╛рди рджрд░реНрдЬ рдХрд░реЗрдВред',
        placeholder: 'рдЙрджрд╛., рдкреБрдгреЗ, рдорд╣рд╛рд░рд╛рд╖реНрдЯреНрд░',
        confirm: 'рд╕реНрдерд╛рди рдХреА рдкреБрд╖реНрдЯрд┐ рдХрд░реЗрдВ',
    },
    nav: { crops: 'рдЖрдкрдХреА рдлрд╕рд▓реЗрдВ', market: 'рдмрд╛рдЬрд╛рд░', schemes: 'рдпреЛрдЬрдирд╛рдПрдВ', diagnose: 'рдирд┐рджрд╛рди', you: 'рдЖрдк' },
    crops: { header: 'рдЖрдкрдХрд╛ рдЦреЗрдд', weatherTitle: 'рдЖрдЬ рдХрд╛ рдореМрд╕рдо', cropTitle: 'рдЕрдиреБрд╢рдВрд╕рд┐рдд рдлрд╕рд▓', cropReason: (crop) => `${crop} рдХреЗ рд▓рд┐рдП рдЖрджрд░реНрд╢ рд╕реНрдерд┐рддрд┐рдпрд╛рдБред`, weatherError: 'рдореМрд╕рдо рдирд╣реАрдВ рдорд┐рд▓ рд╕рдХрд╛ред рдХреГрдкрдпрд╛ рдЕрдкрдирд╛ рд╕реНрдерд╛рди рдФрд░ рдПрдкреАрдЖрдИ рдХреБрдВрдЬреА рдЬрд╛рдВрдЪреЗрдВред' },
    market: { header: 'рдмрд╛рдЬрд╛рд░ рдореВрд▓реНрдп', subtitle: 'рдЖрдкрдХреЗ рд╕реНрдерд╛рдиреАрдп рдХреНрд╖реЗрддреНрд░ рдореЗрдВ рд╡рд░реНрддрдорд╛рди рджрд░реЗрдВ', perQuintal: 'рдкреНрд░рддрд┐ рдХреНрд╡рд┐рдВрдЯрд▓', marketError: 'рдЖрдкрдХреЗ рд╕реНрдерд╛рди рдХреЗ рд▓рд┐рдП рдмрд╛рдЬрд╛рд░ рдореВрд▓реНрдп рд▓реЛрдб рдирд╣реАрдВ рдХрд┐рдП рдЬрд╛ рд╕рдХреЗред', noMarketData: 'рдЗрд╕ рд╕реНрдерд╛рди рдкрд░ рдЖрдкрдХреЗ рджреНрд╡рд╛рд░рд╛ рдЪреБрдиреА рдЧрдИ рдлрд╕рд▓реЛрдВ рдХреЗ рд▓рд┐рдП рдХреЛрдИ рдмрд╛рдЬрд╛рд░ рдбреЗрдЯрд╛ рдирд╣реАрдВ рдорд┐рд▓рд╛ред' },
    schemes: {
      header: 'рд╕рд░рдХрд╛рд░реА рдпреЛрдЬрдирд╛рдПрдВ',
      schemesList: [
        { name: 'рдкреАрдПрдо рдХрд┐рд╕рд╛рди рд╕рдореНрдорд╛рди рдирд┐рдзрд┐', benefit: 'рдкреНрд░рддрд┐ рд╡рд░реНрд╖ тВ╣6,000 рдХреА рд╡рд┐рддреНрддреАрдп рд╕рд╣рд╛рдпрддрд╛ред' },
        { name: 'рдкреНрд░рдзрд╛рдирдордВрддреНрд░реА рдлрд╕рд▓ рдмреАрдорд╛ рдпреЛрдЬрдирд╛', benefit: 'рдлрд╕рд▓ рдЦрд░рд╛рдм рд╣реЛрдиреЗ рдкрд░ рдмреАрдорд╛ рдХрд╡рд░реЗрдЬред' },
        { name: 'рдХрд┐рд╕рд╛рди рдХреНрд░реЗрдбрд┐рдЯ рдХрд╛рд░реНрдб (KCC)', benefit: 'рдХрд┐рд╕рд╛рдиреЛрдВ рдХреЛ рд╕рдордп рдкрд░ рдЛрдг рдЙрдкрд▓рдмреНрдз рдХрд░рд╛рдирд╛ред' },
        { name: 'рдореГрджрд╛ рд╕реНрд╡рд╛рд╕реНрдереНрдп рдХрд╛рд░реНрдб рдпреЛрдЬрдирд╛', benefit: 'рдорд┐рдЯреНрдЯреА рдХреЗ рд╕реНрд╡рд╛рд╕реНрдереНрдп рдореЗрдВ рд╕реБрдзрд╛рд░ рдХрд░рдиреЗ рдореЗрдВ рдорджрдж рдХрд░рддрд╛ рд╣реИред' },
      ],
      learnMore: 'рдФрд░ рдЬрд╛рдиреЗрдВ',
    },
    profile: {
      header: 'рдЖрдкрдХреА рдкреНрд░реЛрдлрд╝рд╛рдЗрд▓',
      name: 'рдирд╛рдо',
      mockName: 'рд░рдореЗрд╢ рдХреБрдорд╛рд░',
      language: 'рднрд╛рд╖рд╛',
      location: 'рд╕реНрдерд╛рди',
      lastCrop: 'рдкрд┐рдЫрд▓реА рд╕рд┐рдлрд╛рд░рд┐рд╢',
      myCrops: 'рдореЗрд░реА рдлрд╕рд▓реЗрдВ',
      noRecommendation: 'рдЕрднреА рддрдХ рдХреЛрдИ рдирд╣реАрдВ',
      switchLanguage: 'рднрд╛рд╖рд╛ рдмрджрд▓реЗрдВ',
    },
    chat: { title: 'рдПрдЖрдИ рд╕рд╣рд╛рдпрдХ', placeholder: 'рдПрдХ рд╕рд╡рд╛рд▓ рдкреВрдЫреЗрдВ...', send: 'рднреЗрдЬреЗрдВ' },
    diagnose: {
        header: 'рдлрд╕рд▓ рдирд┐рджрд╛рди',
        uploadPrompt: 'рдмреАрдорд╛рд░рд┐рдпреЛрдВ рдХреА рдкрд╣рдЪрд╛рди рдХрд░рдиреЗ рдФрд░ рдЙрдкрдЪрд╛рд░ рдкрд╛рдиреЗ рдХреЗ рд▓рд┐рдП рдкреМрдзреЗ рдХреА рдПрдХ рддрд╕реНрд╡реАрд░ рдЕрдкрд▓реЛрдб рдХрд░реЗрдВред',
        uploadBtn: 'рдЫрд╡рд┐ рдЕрдкрд▓реЛрдб рдХрд░реЗрдВ',
        diagnoseBtn: 'рдирд┐рджрд╛рди рдХрд░реЗрдВ',
        analyzing: 'рд╡рд┐рд╢реНрд▓реЗрд╖рдг рд╣реЛ рд░рд╣рд╛ рд╣реИ...',
        clear: 'рджреВрд╕рд░рд╛ рдирд┐рджрд╛рди рдХрд░реЗрдВ',
        error: 'рдХреНрд╖рдорд╛ рдХрд░реЗрдВ, рдореИрдВ рдЗрд╕ рдЫрд╡рд┐ рдХрд╛ рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдирд╣реАрдВ рдХрд░ рд╕рдХрд╛ред рдХреГрдкрдпрд╛ рджреВрд╕рд░реА рдХреЛрд╢рд┐рд╢ рдХрд░реЗрдВред'
    },
    systemInstruction: "рдЖрдк 'рдХрд┐рд╕рд╛рдирдорд┐рддреНрд░' рд╣реИрдВ, рднрд╛рд░рддреАрдп рдХрд┐рд╕рд╛рдиреЛрдВ рдХреЗ рд▓рд┐рдП рдПрдХ рдорд┐рддреНрд░ рдПрдЖрдИред рд╕рд░рд▓ рд╣рд┐рдВрджреА рдореЗрдВ рдЬрд╡рд╛рдм рджреЗрдВред ЁЯМ╛, ЁЯМ▒, ЁЯТз, тШАя╕П, ЁЯЩП рдЬреИрд╕реЗ рдХрд┐рд╕рд╛рди-рд╣рд┐рддреИрд╖реА рдЗрдореЛрдЬреА рдХрд╛ рдкреНрд░рдпреЛрдЧ рдХрд░реЗрдВред рдЙрддреНрддрд░ рд╕рдВрдХреНрд╖рд┐рдкреНрдд рд░рдЦреЗрдВред",
    explainScheme: (name) => `'${name}' рдпреЛрдЬрдирд╛ рдХреЛ рд╕рд░рд▓ рд╢рдмреНрджреЛрдВ рдореЗрдВ рд╕рдордЭрд╛рдПрдВред`,
  },
  gu: {
    appName: 'ркХрк┐рк╕рк╛ркиркорк┐ркдрлНрк░',
    welcome: 'рк╕рлНрк╡рк╛ркЧркд ркЫрлЗ!',
    selectLang: 'ркХрлГрккрк╛ ркХрк░рлАркирлЗ ркдркорк╛рк░рлА ркнрк╛рк╖рк╛ рккрк╕ркВркж ркХрк░рлЛ',
    cropSelection: {
      title: 'рккрк╛ркХ рккрк╕ркВркж ркХрк░рлЛ',
      subtitle: 'ркдркоркирлЗ рк░рлБркЪрк┐ рк╣рлЛркп ркдрлЗрк╡рк╛ 8 ркЬрлЗркЯрк▓рк╛ рккрк╛ркХ рккрк╕ркВркж ркХрк░рлЛ.',
      subtitle2: 'ркдркорлЗ ркдрлЗркирлЗ рккркЫрлАркерлА ркЧркорлЗ ркдрлНркпрк╛рк░рлЗ ркмркжрк▓рлА рк╢ркХрлЛ ркЫрлЛ.',
      next: 'ркЖркЧрк│',
      counter: (count) => `${count}/8`,
      crops: [
        { name: 'ркЪрлЛркЦрк╛', emoji: 'ЁЯНЪ' }, { name: 'ркШркЙркВ', emoji: 'ЁЯМ╛' }, { name: 'рк╢рлЗрк░ркбрлА', emoji: 'ЁЯОЛ' },
        { name: 'ркХрккрк╛рк╕', emoji: 'тЪк' }, { name: 'ркХркарлЛрк│', emoji: 'ЁЯлШ' }, { name: 'ркдрлЗрк▓рлАркмрк┐ркпрк╛ркВ', emoji: 'ЁЯМ╝' },
        { name: 'ркоркХрк╛ркИ', emoji: 'ЁЯМ╜' }, { name: 'ркмркЯрк╛ркХрк╛', emoji: 'ЁЯеФ' }, { name: 'ркбрлБркВркЧрк│рлА', emoji: 'ЁЯзЕ' },
        { name: 'ркЯрк╛ркорлЗркЯрк╛', emoji: 'ЁЯНЕ' }, { name: 'рк╕рлЛркпрк╛ркмрлАрки', emoji: 'ЁЯМ▒' }, { name: 'ркоркЧрклрк│рлА', emoji: 'ЁЯеЬ' },
        { name: 'ркмрк╛ркЬрк░рлА', emoji: 'ЁЯМ╛' }, { name: 'ркХрлЗрк░рлА', emoji: 'ЁЯен' }, { name: 'ркХрлЗрк│рк╛', emoji: 'ЁЯНМ' },
        { name: 'ркЪрк╛', emoji: 'ЁЯН╡' },
      ],
    },
    locationSelection: {
        title: 'ркдркорк╛рк░рлБркВ рк╕рлНркерк╛рки',
        subtitle: 'рк╡рлНркпркХрлНркдрк┐ркЧркд рк╣рк╡рк╛ркорк╛рки ркЕркирлЗ ркмркЬрк╛рк░ ркорк╛рк╣рк┐ркдрлА ркорк╛ркЯрлЗ ркдркорк╛рк░рлБркВ рк╕рлНркерк╛рки ркжрк╛ркЦрк▓ ркХрк░рлЛ.',
        placeholder: 'ркжрк╛.ркд., рккрлБркгрлЗ, ркорк╣рк╛рк░рк╛рк╖рлНркЯрлНрк░',
        confirm: 'рк╕рлНркерк╛ркиркирлА рккрлБрк╖рлНркЯрк┐ ркХрк░рлЛ',
    },
    nav: { crops: 'ркдркорк╛рк░рк╛ рккрк╛ркХ', market: 'ркмркЬрк╛рк░', schemes: 'ркпрлЛркЬркирк╛ркУ', diagnose: 'ркирк┐ркжрк╛рки', you: 'ркдркорлЗ' },
    crops: { header: 'ркдркорк╛рк░рлБркВ ркЦрлЗркдрк░', weatherTitle: 'ркЖркЬркирлБркВ рк╣рк╡рк╛ркорк╛рки', cropTitle: 'ркнрк▓рк╛ркоркг ркХрк░рлЗрк▓ рккрк╛ркХ', cropReason: (crop) => `${crop} ркорк╛ркЯрлЗ ркЖркжрк░рлНрк╢ рккрк░рк┐рк╕рлНркерк┐ркдрк┐ркУ.`, weatherError: 'рк╣рк╡рк╛ркорк╛рки рк▓рк╛рк╡рлА рк╢ркХрк╛ркпрлБркВ ркиркерлАред ркХрлГрккрк╛ ркХрк░рлАркирлЗ ркдркорк╛рк░рлБркВ рк╕рлНркерк╛рки ркЕркирлЗ API ркХрлА ркдрккрк╛рк╕рлЛ.' },
    market: { header: 'ркмркЬрк╛рк░ ркнрк╛рк╡', subtitle: 'ркдркорк╛рк░рк╛ рк╕рлНркерк╛ркирк┐ркХ рк╡рк┐рк╕рлНркдрк╛рк░ркорк╛ркВ рк╡рк░рлНркдркорк╛рки ркжрк░рлЛ', perQuintal: 'рккрлНрк░ркдрк┐ ркХрлНрк╡рк┐ркирлНркЯрк▓', marketError: 'ркдркорк╛рк░рк╛ рк╕рлНркерк╛рки ркорк╛ркЯрлЗ ркмркЬрк╛рк░ ркнрк╛рк╡ рк▓рлЛркб ркХрк░рлА рк╢ркХрк╛ркпрк╛ ркиркерлАред', noMarketData: 'ркЖ рк╕рлНркерк╛рки рккрк░ ркдркорк╛рк░рк╛ рккрк╕ркВркж ркХрк░рлЗрк▓рк╛ рккрк╛ркХ ркорк╛ркЯрлЗ ркХрлЛркИ ркмркЬрк╛рк░ ркбрлЗркЯрк╛ ркорк│рлНркпрлЛ ркиркерлА.' },
    schemes: {
      header: 'рк╕рк░ркХрк╛рк░рлА ркпрлЛркЬркирк╛ркУ',
      schemesList: [
        { name: 'рккрлАркПрко ркХрк┐рк╕рк╛рки рк╕ркирлНркорк╛рки ркирк┐ркзрк┐', benefit: 'рккрлНрк░ркдрк┐ рк╡рк░рлНрк╖ тВ╣6,000 ркирлА ркирк╛ркгрк╛ркХрлАркп рк╕рк╣рк╛ркп.' },
        { name: 'рккрлНрк░ркзрк╛ркиркоркВркдрлНрк░рлА рклрк╕рк▓ ркмрлАркорк╛ ркпрлЛркЬркирк╛', benefit: 'рккрк╛ркХркирлА ркирк┐рк╖рлНрклрк│ркдрк╛ рк╕рк╛ркорлЗ рк╡рлАркорк╛ ркХрк╡рк░рлЗркЬ.' },
        { name: 'ркХрк┐рк╕рк╛рки ркХрлНрк░рлЗркбрк┐ркЯ ркХрк╛рк░рлНркб (KCC)', benefit: 'ркЦрлЗркбрлВркдрлЛркирлЗ рк╕ркоркпрк╕рк░ ркзрк┐рк░рк╛ркг рккрлВрк░рлБркВ рккрк╛ркбрлЗ ркЫрлЗ.' },
        { name: 'рк╕рлЛркЗрк▓ рк╣рлЗрк▓рлНрке ркХрк╛рк░рлНркб ркпрлЛркЬркирк╛', benefit: 'ркЬркорлАркиркирк╛ рк╕рлНрк╡рк╛рк╕рлНркерлНркпркирлЗ рк╕рлБркзрк╛рк░рк╡рк╛ркорк╛ркВ ркоркжркж ркХрк░рлЗ ркЫрлЗ.' },
      ],
      learnMore: 'рк╡ркзрлБ рк╢рлАркЦрлЛ',
    },
    profile: {
      header: 'ркдркорк╛рк░рлА рккрлНрк░рлЛрклрк╛ркЗрк▓',
      name: 'ркирк╛рко',
      mockName: 'рк░ркорлЗрк╢ ркХрлБркорк╛рк░',
      language: 'ркнрк╛рк╖рк╛',
      location: 'рк╕рлНркерк╛рки',
      lastCrop: 'ркЫрлЗрк▓рлНрк▓рлА ркнрк▓рк╛ркоркг',
      myCrops: 'ркорк╛рк░рк╛ рккрк╛ркХ',
      noRecommendation: 'рк╣ркЬрлА рк╕рлБркзрлА ркХрлЛркИ ркиркерлА',
      switchLanguage: 'ркнрк╛рк╖рк╛ ркмркжрк▓рлЛ',
    },
    chat: { title: 'ркПркЖркИ рк╕рк╣рк╛ркпркХ', placeholder: 'ркПркХ рккрлНрк░рк╢рлНрки рккрлВркЫрлЛ...', send: 'ркорлЛркХрк▓рлЛ' },
     diagnose: {
        header: 'рккрк╛ркХ ркирк┐ркжрк╛рки',
        uploadPrompt: 'рк░рлЛркЧрлЛркирлА ркУрк│ркЦ ркЕркирлЗ ркЙрккрк╛ркпрлЛ ркорлЗрк│рк╡рк╡рк╛ ркорк╛ркЯрлЗ ркЫрлЛркбркирлЛ рклрлЛркЯрлЛ ркЕрккрк▓рлЛркб ркХрк░рлЛ.',
        uploadBtn: 'ркЫркмрлА ркЕрккрк▓рлЛркб ркХрк░рлЛ',
        diagnoseBtn: 'ркирк┐ркжрк╛рки ркХрк░рлЛ',
        analyzing: 'рк╡рк┐рк╢рлНрк▓рлЗрк╖ркг рк░рк╣рлНркпрлБркВ ркЫрлЗ...',
        clear: 'ркмрлАркЬрлБркВ ркирк┐ркжрк╛рки ркХрк░рлЛ',
        error: 'ркорк╛ркл ркХрк░рк╢рлЛ, рк╣рлБркВ ркЖ ркЫркмрлАркирлБркВ рк╡рк┐рк╢рлНрк▓рлЗрк╖ркг ркХрк░рлА рк╢ркХрлНркпрлЛ ркиркерлА. ркХрлГрккрк╛ ркХрк░рлАркирлЗ ркмрлАркЬрлА ркЫркмрлАркирлЛ рккрлНрк░ркпрк╛рк╕ ркХрк░рлЛ.'
    },
    systemInstruction: "ркдркорлЗ 'ркХрк┐рк╕рк╛ркиркорк┐ркдрлНрк░' ркЫрлЛ, ркнрк╛рк░ркдрлАркп ркЦрлЗркбрлВркдрлЛ ркорк╛ркЯрлЗ ркорлИркдрлНрк░рлАрккрлВрк░рлНркг AI. рк╕рк░рк│ ркЧрлБркЬрк░рк╛ркдрлАркорк╛ркВ ркЬрк╡рк╛ркм ркЖрккрлЛ. ЁЯМ╛, ЁЯМ▒, ЁЯТз, тШАя╕П, ЁЯЩП ркЬрлЗрк╡рк╛ ркЦрлЗркбрлВркд-ркорлИркдрлНрк░рлАрккрлВрк░рлНркг ркЗркорлЛркЬрлАркирлЛ ркЙрккркпрлЛркЧ ркХрк░рлЛ. ркЬрк╡рк╛ркмрлЛ ркЯрлВркВркХрк╛ рк░рк╛ркЦрлЛ.",
    explainScheme: (name) => `'${name}' ркпрлЛркЬркирк╛ркирлЗ рк╕рк░рк│ рк╢ркмрлНркжрлЛркорк╛ркВ рк╕ркоркЬрк╛рк╡рлЛ.`,
  },
};

const state = {
  language: 'en',
  appView: 'language',
  selectedCrops: [],
  location: null,
  activeTab: 'crops',
  isChatLoading: false,
  isChatOpen: false,
  chatHistory: [],
  weatherData: null,
  marketData: null,
  diagnoseImageFile: null as File | null,
  diagnoseImageBase64: null as string | null,
  isDiagnosing: false,
  diagnoseResult: null as string | null,
};

const rootEl = document.getElementById('root');

// --- RENDERING ---

function renderCurrentView() {
  switch (state.appView) {
    case 'language':
      return renderLanguageSelector();
    case 'crop_selection':
      return renderCropSelector();
    case 'location_selection':
        return renderLocationSelector();
    case 'main_app':
      return renderAppShell();
  }
}

function render() {
  const t = translations[state.language];
  document.documentElement.lang = state.language;
  
  const activePage = document.querySelector('.page.active');
  if (activePage) activePage.classList.remove('active');
  const newPage = document.getElementById(state.activeTab);
  if (newPage) newPage.classList.add('active');

  const activeNav = document.querySelector('.nav-btn.active');
  if(activeNav) activeNav.classList.remove('active');
  const newNav = document.querySelector(`.nav-btn[data-tab="${state.activeTab}"]`);
  if(newNav) newNav.classList.add('active');

  switch(state.activeTab) {
    case 'crops': renderCropsPage(t); break;
    case 'market': renderMarketPage(t); break;
    case 'schemes': renderSchemesPage(t); break;
    case 'diagnose': renderDiagnosePage(t); break;
    case 'you': renderProfilePage(t); break;
  }
}

function renderAppShell() {
  const t = translations[state.language];
  rootEl.innerHTML = `
    <div class="app-shell">
      <main class="page-container">
        <div id="crops" class="page"></div>
        <div id="market" class="page"></div>
        <div id="schemes" class="page"></div>
        <div id="diagnose" class="page"></div>
        <div id="you" class="page"></div>
      </main>
      
      <button class="fab-chat" id="fab-chat-btn" aria-label="${t.chat.title}">ЁЯТм</button>
      
      <nav class="bottom-nav">
        <button class="nav-btn" data-tab="crops" aria-label="${t.nav.crops}"><span class="icon">ЁЯМ╛</span><span class="label">${t.nav.crops}</span></button>
        <button class="nav-btn" data-tab="market" aria-label="${t.nav.market}"><span class="icon">ЁЯПк</span><span class="label">${t.nav.market}</span></button>
        <button class="nav-btn" data-tab="schemes" aria-label="${t.nav.schemes}"><span class="icon">ЁЯУЬ</span><span class="label">${t.nav.schemes}</span></button>
        <button class="nav-btn" data-tab="diagnose" aria-label="${t.nav.diagnose}"><span class="icon">ЁЯй║</span><span class="label">${t.nav.diagnose}</span></button>
        <button class="nav-btn" data-tab="you" aria-label="${t.nav.you}"><span class="icon">ЁЯСд</span><span class="label">${t.nav.you}</span></button>
      </nav>
      
      <div class="chat-overlay">
        <div class="chat-modal">
          <header class="chat-header">
            <h3>${t.chat.title}</h3>
            <button id="close-chat-btn" aria-label="Close chat">&times;</button>
          </header>
          <div class="chat-messages"></div>
          <form class="chat-form">
            <input type="text" id="chat-input" placeholder="${t.chat.placeholder}" autocomplete="off" />
            <button type="submit" id="send-btn">${t.chat.send}</button>
          </form>
        </div>
      </div>
    </div>
  `;
  addEventListeners();
  render();
}

function renderCropsPage(t) {
  const pageEl = document.getElementById('crops');
  pageEl.innerHTML = `
    <h1 class="page-header">${t.crops.header}</h1>
    <div id="weather-container"></div>
    <div id="crop-container"></div>
  `;
  if (!state.weatherData) {
    fetchWeatherAndCrop();
  } else {
    renderWeatherCard(state.weatherData, t);
    renderCropCard(state.weatherData, t);
  }
}

function renderWeatherCard(data, t) {
  const container = document.getElementById('weather-container');
  if (data.error) {
    container.innerHTML = `
    <div class="card weather-card error">
      <p>${data.error}</p>
    </div>
    `
    return;
  }
  container.innerHTML = `
    <div class="card weather-card">
      <h2 class="card-title">${t.crops.weatherTitle}</h2>
      <div class="content">
        <div>
          <p class="location">${data.city}</p>
          <p class="temp">${data.temp}┬░C</p>
          <p class="condition">${data.condition}</p>
        </div>
        <div class="icon">${data.emoji}</div>
      </div>
    </div>
  `;
}

function renderCropCard(data, t) {
    if (data.error) {
        document.getElementById('crop-container').innerHTML = '';
        return;
    }
    const container = document.getElementById('crop-container');
    container.innerHTML = `
    <div class="card crop-card">
      <h2 class="card-title">${t.crops.cropTitle}</h2>
      <div class="content">
        <div class="icon">ЁЯМ▒</div>
        <div>
          <p class="crop-name">${data.crop}</p>
          <p class="reason">${t.crops.cropReason(data.crop)}</p>
        </div>
      </div>
    </div>
    `;
}

function renderMarketPage(t) {
  const pageEl = document.getElementById('market');
  pageEl.innerHTML = `
    <h1 class="page-header">${t.market.header}</h1>
    <div class="card">
      <p style="margin-bottom: 1rem; color: #555;">${t.market.subtitle}</p>
      <div id="market-list"></div>
    </div>
  `;
  if (!state.marketData) {
    fetchMarketPrices();
  } else {
    renderMarketList(state.marketData, t);
  }
}

function renderMarketList(data, t) {
    const listEl = document.getElementById('market-list');
    
    if (data.error) {
        listEl.innerHTML = `<p class="error-message">${data.error}</p>`;
        return;
    }
    
    if (data.noData || data.length === 0) {
        listEl.innerHTML = `<p>${t.market.noMarketData}</p>`;
        return;
    }

    listEl.innerHTML = data.map(item => `
        <div class="market-list-item">
            <span class="crop-name">${item.crop}</span>
            <span class="price">тВ╣${item.price} / ${t.market.perQuintal}</span>
        </div>
    `).join('');
}

function renderSchemesPage(t) {
  const pageEl = document.getElementById('schemes');
  pageEl.innerHTML = `
    <h1 class="page-header">${t.schemes.header}</h1>
    ${t.schemes.schemesList.map(scheme => `
      <div class="card scheme-card">
        <h3 class="card-title">${scheme.name}</h3>
        <p>${scheme.benefit}</p>
        <button class="learn-more-btn" data-scheme="${scheme.name}">${t.schemes.learnMore}</button>
      </div>
    `).join('')}
  `;
  document.querySelectorAll('.learn-more-btn').forEach(btn => 
    btn.addEventListener('click', (e) => handleSchemeClick((e.target as HTMLElement).dataset.scheme))
  );
}

function renderDiagnosePage(t) {
    const pageEl = document.getElementById('diagnose');
    let content = `<h1 class="page-header">${t.diagnose.header}</h1>`;

    if (state.isDiagnosing) {
        content += `
            <div class="diagnose-loader-overlay">
                <div class="loader"><div class="dot-flashing"></div></div>
                <p>${t.diagnose.analyzing}</p>
            </div>
        `;
    } else if (state.diagnoseResult) {
        content += `
            <div class="card diagnose-result-card">
                ${marked.parse(state.diagnoseResult)}
            </div>
            <button class="diagnose-btn" id="diagnose-clear-btn">${t.diagnose.clear}</button>
        `;
    } else if (state.diagnoseImageBase64) {
        content += `
            <div class="diagnose-preview-container">
                <img src="${state.diagnoseImageBase64}" alt="Crop preview" id="diagnose-preview-img" />
            </div>
            <button class="diagnose-btn" id="diagnose-confirm-btn">${t.diagnose.diagnoseBtn}</button>
        `;
    } else {
        content += `
            <div class="diagnose-upload-area">
                <input type="file" id="diagnose-upload-input" accept="image/*" style="display: none;" />
                <label for="diagnose-upload-input" class="diagnose-upload-label">
                    <span class="icon">ЁЯУ╖</span>
                    <p>${t.diagnose.uploadPrompt}</p>
                    <span class="diagnose-btn-upload">${t.diagnose.uploadBtn}</span>
                </label>
            </div>
        `;
    }

    pageEl.innerHTML = content;

    // Add event listeners for this page
    document.getElementById('diagnose-upload-input')?.addEventListener('change', handleImageUpload);
    document.getElementById('diagnose-confirm-btn')?.addEventListener('click', handleDiagnoseClick);
    document.getElementById('diagnose-clear-btn')?.addEventListener('click', handleClearDiagnosis);
}


function renderProfilePage(t) {
  const pageEl = document.getElementById('you');
  const langMap = { en: 'English', hi: 'рд╣рд┐рдиреНрджреА', gu: 'ркЧрлБркЬрк░рк╛ркдрлА' };
  pageEl.innerHTML = `
    <h1 class="page-header">${t.profile.header}</h1>
    <div class="card">
      <div class="profile-info-item">
        <span class="label">${t.profile.name}</span>
        <span class="value">${t.profile.mockName}</span>
      </div>
      <div class="profile-info-item">
        <span class="label">${t.profile.language}</span>
        <span class="value">${langMap[state.language]}</span>
      </div>
      <div class="profile-info-item">
        <span class="label">${t.profile.location}</span>
        <span class="value">${state.location}</span>
      </div>
      <div class="profile-info-item">
        <span class="label">${t.profile.lastCrop}</span>
        <span class="value">${state.weatherData?.crop || t.profile.noRecommendation}</span>
      </div>
    </div>
    <div class="card">
        <h2 class="card-title">${t.profile.myCrops}</h2>
        <div class="my-crops-list">
            ${state.selectedCrops.length > 0 ? state.selectedCrops.map(c => `<span>${c}</span>`).join(', ') : 'No crops selected.'}
        </div>
    </div>
    <button class="switch-lang-btn" id="switch-lang-btn">${t.profile.switchLanguage}</button>
  `;
  document.getElementById('switch-lang-btn')?.addEventListener('click', () => {
    state.appView = 'language';
    renderCurrentView();
  });
}

function renderChat() {
  const messagesContainer = document.querySelector('.chat-messages');
  messagesContainer.innerHTML = state.chatHistory.map(msg => 
    `<div class="chat-message ${msg.role}"><div>${marked.parse(msg.text)}</div></div>`
  ).join('');
  if (state.isChatLoading) {
    messagesContainer.innerHTML += `<div class="chat-message bot"><div class="loader"><div class="dot-flashing"></div></div></div>`;
  }
  messagesContainer.scrollTop = messagesContainer.scrollHeight;
}

function renderLanguageSelector() {
  state.selectedCrops = [];
  rootEl.innerHTML = `
    <div class="language-selector-overlay">
      <h1>${translations.en.welcome} / ${translations.hi.welcome} / ${translations.gu.welcome}</h1>
      <p>${translations.en.selectLang} / ${translations.hi.selectLang} / ${translations.gu.selectLang}</p>
      <div class="language-buttons">
        <button class="language-btn" data-lang="en">English</button>
        <button class="language-btn" data-lang="hi">рд╣рд┐рдиреНрджреА</button>
        <button class="language-btn" data-lang="gu">ркЧрлБркЬрк░рк╛ркдрлА</button>
      </div>
    </div>
  `;
  document.querySelectorAll('.language-btn').forEach(btn => {
    btn.addEventListener('click', (e) => {
      handleLanguageSelect((e.target as HTMLElement).dataset.lang);
    });
  });
}

function renderCropSelector() {
    const t = translations[state.language];
    const cropTranslations = t.cropSelection;
    rootEl.innerHTML = `
        <div class="crop-selector-page">
            <header class="selection-header">
                <div>
                    <h1>${cropTranslations.title}</h1>
                    <p>${cropTranslations.subtitle}<br/>${cropTranslations.subtitle2}</p>
                </div>
                <span class="selection-counter">${cropTranslations.counter(state.selectedCrops.length)}</span>
            </header>
            <main class="crop-grid">
                ${cropTranslations.crops.map(crop => {
                    const isSelected = state.selectedCrops.includes(crop.name);
                    return `
                    <button class="crop-item ${isSelected ? 'selected' : ''}" data-crop="${crop.name}">
                        <div class="crop-icon-wrapper">
                           <span class="crop-icon">${crop.emoji}</span>
                        </div>
                        <span class="crop-name-label">${crop.name}</span>
                    </button>`;
                }).join('')}
            </main>
            <footer class="selection-footer">
                <button class="next-btn" id="next-from-crops-btn" ${state.selectedCrops.length === 0 ? 'disabled' : ''}>
                    ${cropTranslations.next}
                </button>
            </footer>
        </div>
    `;

    document.querySelectorAll('.crop-item').forEach(item => {
        item.addEventListener('click', (e) => {
            const cropName = (e.currentTarget as HTMLElement).dataset.crop;
            handleCropItemClick(cropName);
        });
    });

    document.getElementById('next-from-crops-btn')?.addEventListener('click', handleNextFromCrops);
}

function renderLocationSelector() {
    const t = translations[state.language].locationSelection;
    rootEl.innerHTML = `
        <div class="location-selector-page">
            <div class="location-content">
                <span class="location-icon">ЁЯУН</span>
                <h1>${t.title}</h1>
                <p>${t.subtitle}</p>
                <form id="location-form">
                    <input type="text" id="location-input" placeholder="${t.placeholder}" autocomplete="off" />
                    <button type="submit" id="location-confirm-btn" disabled>${t.confirm}</button>
                </form>
            </div>
        </div>
    `;

    const inputEl = document.getElementById('location-input') as HTMLInputElement;
    const btnEl = document.getElementById('location-confirm-btn') as HTMLButtonElement;
    const formEl = document.getElementById('location-form');

    inputEl.addEventListener('input', () => {
        btnEl.disabled = inputEl.value.trim() === '';
    });

    formEl.addEventListener('submit', (e) => {
        e.preventDefault();
        if (inputEl.value.trim()) {
            handleLocationConfirm(inputEl.value.trim());
        }
    });
}

// --- API & LOGIC ---

function fileToBase64(file: File): Promise<{mimeType: string, data: string}> {
  return new Promise((resolve, reject) => {
    const reader = new FileReader();
    reader.readAsDataURL(file);
    reader.onload = () => {
        const result = reader.result as string;
        const mimeType = result.split(':')[1].split(';')[0];
        const data = result.split(',')[1];
        resolve({ mimeType, data });
    };
    reader.onerror = error => reject(error);
  });
}

function getWeatherEmojiFromCode(code) {
    const emojiMap = {
        1000: 'тШАя╕П', // Sunny
        1003: 'ЁЯМдя╕П', // Partly cloudy
        1006: 'тШБя╕П', // Cloudy
        1009: 'тШБя╕П', // Overcast
        1030: 'ЁЯМля╕П', // Mist
        1063: 'ЁЯМжя╕П', // Patchy rain possible
        1066: 'ЁЯМия╕П', // Patchy snow possible
        1069: 'ЁЯМия╕П', // Patchy sleet possible
        1072: 'ЁЯМия╕П', // Patchy freezing drizzle possible
        1087: 'тЫИя╕П', // Thundery outbreaks possible
        1114: 'тЭДя╕П', // Blowing snow
        1117: 'тЭДя╕П', // Blizzard
        1135: 'ЁЯМля╕П', // Fog
        1147: 'ЁЯМля╕П', // Freezing fog
        1150: 'ЁЯМжя╕П', // Patchy light drizzle
        1153: 'ЁЯМжя╕П', // Light drizzle
        1168: 'ЁЯМия╕П', // Freezing drizzle
        1171: 'ЁЯМия╕П', // Heavy freezing drizzle
        1180: 'ЁЯМжя╕П', // Patchy light rain
        1183: 'ЁЯМзя╕П', // Light rain
        1186: 'ЁЯМзя╕П', // Moderate rain at times
        1189: 'ЁЯМзя╕П', // Moderate rain
        1192: 'ЁЯМзя╕П', // Heavy rain at times
        1195: 'ЁЯМзя╕П', // Heavy rain
        1198: 'ЁЯМия╕П', // Light freezing rain
        1201: 'ЁЯМия╕П', // Moderate or heavy freezing rain
        1204: 'ЁЯМия╕П', // Light sleet
        1207: 'ЁЯМия╕П', // Moderate or heavy sleet
        1210: 'ЁЯМия╕П', // Patchy light snow
        1213: 'тЭДя╕П', // Light snow
        1216: 'тЭДя╕П', // Patchy moderate snow
        1219: 'тЭДя╕П', // Moderate snow
        1222: 'тЭДя╕П', // Patchy heavy snow
        1225: 'тЭДя╕П', // Heavy snow
        1237: 'ЁЯМия╕П', // Ice pellets
        1240: 'ЁЯМжя╕П', // Light rain shower
        1243: 'ЁЯМзя╕П', // Moderate or heavy rain shower
        1246: 'ЁЯМзя╕П', // Torrential rain shower
        1249: 'ЁЯМия╕П', // Light sleet showers
        1252: 'ЁЯМия╕П', // Moderate or heavy sleet showers
        1255: 'ЁЯМия╕П', // Light snow showers
        1258: 'тЭДя╕П', // Moderate or heavy snow showers
        1261: 'ЁЯМия╕П', // Light showers of ice pellets
        1264: 'ЁЯМия╕П', // Moderate or heavy showers of ice pellets
        1273: 'тЫИя╕П', // Patchy light rain with thunder
        1276: 'тЫИя╕П', // Moderate or heavy rain with thunder
        1279: 'тЫИя╕П', // Patchy light snow with thunder
        1282: 'тЫИя╕П', // Moderate or heavy snow with thunder
    };
    return emojiMap[code] || 'ЁЯМН';
}

async function fetchWeatherAndCrop() {
    const container = document.getElementById('weather-container');
    container.innerHTML = `<div class="loader"><div class="dot-flashing"></div></div>`;
    
    if (!WEATHER_API_KEY) {
        state.weatherData = { error: 'Weather API Key is not set in index.tsx.' };
        render();
        return;
    }

    try {
        const url = `https://api.weatherapi.com/v1/current.json?key=${WEATHER_API_KEY}&q=${state.location}`;
        const response = await fetch(url);
        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.error.message || 'Weather data not found.');
        }
        const weather = await response.json();
        const data = {
            city: weather.location.name,
            temp: Math.round(weather.current.temp_c),
            condition: weather.current.condition.text,
            emoji: getWeatherEmojiFromCode(weather.current.condition.code),
            crop: state.selectedCrops[0] || 'Sugarcane' // Keep mock crop recommendation for now
        };
        state.weatherData = data;
    } catch (error) {
        console.error("Failed to fetch weather:", error);
        state.weatherData = { error: translations[state.language].crops.weatherError };
    }
    render();
}

function fetchMarketPrices() {
    const listEl = document.getElementById('market-list');
    listEl.innerHTML = `<div class="loader"><div class="dot-flashing"></div></div>`;
    const t = translations[state.language];

    setTimeout(() => { // Simulate async operation
        try {
            const locationParts = state.location.toLowerCase().split(',').map(p => p.trim());
            let district = '';
            let locationState = '';

            if (locationParts.length > 1) {
                district = locationParts[0];
                locationState = locationParts[1];
            } else {
                district = locationParts[0];
            }
            
            const locationData = marketDatabase.filter(record => {
                const recordDistrict = record.district.toLowerCase();
                const recordState = record.state.toLowerCase();
                if (locationState) {
                    return recordDistrict.includes(district) && recordState.includes(locationState);
                }
                return recordDistrict.includes(district);
            });

            if (locationData.length === 0) {
                 state.marketData = { noData: true };
                 render();
                 return;
            }

            const cropsToFetchLang = state.selectedCrops.length > 0
                ? state.selectedCrops
                : ['Wheat', 'Rice', 'Tomato'].map(enCrop => {
                    const enIndex = translations.en.cropSelection.crops.findIndex(c => c.name === enCrop);
                    return t.cropSelection.crops[enIndex].name;
                });

            const cropsToFetchEn = cropsToFetchLang.map(langCrop => {
                 const langIndex = t.cropSelection.crops.findIndex(c => c.name === langCrop);
                 return translations.en.cropSelection.crops[langIndex].name;
            });
            
            const priceMap = new Map();

            for (const record of locationData) {
                const appCropEn = commodityMap[record.commodity];
                if (appCropEn && cropsToFetchEn.includes(appCropEn) && !priceMap.has(appCropEn)) {
                    const enIndex = translations.en.cropSelection.crops.findIndex(c => c.name === appCropEn);
                    if (enIndex !== -1) {
                        const translatedCropName = t.cropSelection.crops[enIndex].name;
                        priceMap.set(appCropEn, { crop: translatedCropName, price: record.modal_price });
                    }
                }
            }

            const formattedData = Array.from(priceMap.values());

            if (formattedData.length === 0) {
                state.marketData = { noData: true };
            } else {
                state.marketData = formattedData;
            }

        } catch (error) {
            console.error("Failed to process market prices:", error);
            state.marketData = { error: t.market.marketError };
        }
        render();
    }, 500); // Small delay to show loader
}


async function handleSendMessage(prompt) {
  if (!prompt.trim() || state.isChatLoading) return;

  state.isChatLoading = true;
  state.chatHistory.push({ role: 'user', text: prompt });
  renderChat();

  const sendBtn = document.getElementById('send-btn') as HTMLButtonElement;
  if(sendBtn) sendBtn.disabled = true;

  try {
    const responseStream = await chat.sendMessageStream({ message: prompt });

    let fullResponse = '';
    state.isChatLoading = false;
    state.chatHistory.push({ role: 'bot', text: '' });
    renderChat(); // To show the empty bot message container

    for await (const chunk of responseStream) {
        fullResponse += chunk.text;
        state.chatHistory[state.chatHistory.length - 1].text = fullResponse;
        renderChat();
    }
  } catch (error) {
    console.error(error);
    state.isChatLoading = false;
    state.chatHistory.push({ role: 'bot', text: 'Sorry, something went wrong. Please try again.' });
    renderChat();
  } finally {
    state.isChatLoading = false;
    if(sendBtn) sendBtn.disabled = false;
    (document.getElementById('chat-input') as HTMLInputElement).focus();
  }
}

// --- EVENT HANDLERS ---

function handleLanguageSelect(lang) {
  state.language = lang;
  state.appView = 'crop_selection';
  renderCurrentView();
}

function handleCropItemClick(cropName) {
    const cropIndex = state.selectedCrops.indexOf(cropName);
    if (cropIndex > -1) {
        state.selectedCrops.splice(cropIndex, 1);
    } else {
        if (state.selectedCrops.length < 8) {
            state.selectedCrops.push(cropName);
        }
    }
    renderCropSelector();
}

function handleNextFromCrops() {
    if (state.selectedCrops.length > 0) {
        state.appView = 'location_selection';
        renderCurrentView();
    }
}

function handleLocationConfirm(location: string) {
    state.location = location;
    state.appView = 'main_app';
    
    // Initialize main app state
    state.chatHistory = [];
    state.weatherData = null; 
    state.marketData = null;
    state.activeTab = 'crops';

    chat = ai.chats.create({
        model: 'gemini-2.5-flash',
        config: {
          systemInstruction: translations[state.language].systemInstruction,
        },
    });

    renderCurrentView();
}

function handleNavClick(tab) {
  state.activeTab = tab;
  render();
}

function handleSchemeClick(schemeName) {
  const prompt = translations[state.language].explainScheme(schemeName);
  toggleChat(true);
  handleSendMessage(prompt);
}

async function handleImageUpload(event: Event) {
    const input = event.target as HTMLInputElement;
    if (input.files && input.files[0]) {
        const file = input.files[0];
        state.diagnoseImageFile = file;
        const reader = new FileReader();
        reader.onload = (e) => {
            state.diagnoseImageBase64 = e.target.result as string;
            render();
        };
        reader.readAsDataURL(file);
    }
}

async function handleDiagnoseClick() {
    if (!state.diagnoseImageFile) return;

    state.isDiagnosing = true;
    render();

    try {
        const { mimeType, data } = await fileToBase64(state.diagnoseImageFile);
        const imagePart = { inlineData: { mimeType, data } };
        const textPart = { text: "You are an expert agricultural assistant for farmers. Analyze the image of this plant.\n\n1.  **Identify the plant.**\n2.  **Identify the disease,** if any. If the plant looks healthy, clearly state that.\n3.  **Explain the symptoms** in very simple, easy-to-understand terms, like you're talking to a local farmer.\n4.  **Provide simple, step-by-step remedies.** Create two sections: 'Organic Remedies' (things they can often make at home) and 'Chemical Remedies' (pesticides or fungicides to buy).\n\nKeep all language extremely simple and use short sentences. Format the final output using markdown with these exact headings: **Plant**, **Disease**, **Symptoms**, **Organic Remedies**, and **Chemical Remedies**." };

        const response = await ai.models.generateContent({
            model: 'gemini-2.5-flash',
            contents: { parts: [imagePart, textPart] },
        });

        state.diagnoseResult = response.text;
    } catch (error) {
        console.error("Diagnosis failed:", error);
        state.diagnoseResult = translations[state.language].diagnose.error;
    } finally {
        state.isDiagnosing = false;
        render();
    }
}

function handleClearDiagnosis() {
    state.diagnoseImageFile = null;
    state.diagnoseImageBase64 = null;
    state.diagnoseResult = null;
    state.isDiagnosing = false;
    render();
}

function toggleChat(isOpen) {
  state.isChatOpen = isOpen;
  const overlay = document.querySelector('.chat-overlay');
  if (isOpen) {
    overlay.classList.add('visible');
    (document.getElementById('chat-input') as HTMLInputElement).focus();
  } else {
    overlay.classList.remove('visible');
  }
}

function addEventListeners() {
  document.querySelectorAll('.nav-btn').forEach(btn => {
    btn.addEventListener('click', () => handleNavClick((btn as HTMLElement).dataset.tab));
  });

  document.getElementById('fab-chat-btn')?.addEventListener('click', () => toggleChat(true));
  document.getElementById('close-chat-btn')?.addEventListener('click', () => toggleChat(false));
  document.querySelector('.chat-overlay')?.addEventListener('click', (e) => {
      if (e.target === e.currentTarget) toggleChat(false);
  });
  
  document.querySelector('.chat-form')?.addEventListener('submit', (e) => {
    e.preventDefault();
    const input = document.getElementById('chat-input') as HTMLInputElement;
    handleSendMessage(input.value);
    input.value = '';
  });
}

// --- INITIALIZATION ---
function main() {
  renderCurrentView();
}

main();